use Array: all;
use StdIO: all;

noinline
int test()
{
    MTClock::touch();
    Rapl::touch();
    Perf::touch();

    return sum(iota([1000,500,100]));
}

int main()
{
    for (i = 0; i < 3; i += 1) {
        instructions_fd, cycles_fd, ref_cycles_fd, bus_cycles_fd, stalled_cycles_fd, cache_misses_fd, cache_ref_fd = Perf::perfStart();
        rapl0 = Rapl::raplStart(0, -1);
        rapl00 = Rapl::raplStart(0, 0);
        sec1, nsec1 = MTClock::gettime();

        printf("res = %d\n", test());

        sec2, nsec2 = MTClock::gettime();
        energy0 = Rapl::tod(Rapl::raplStop(0, -1, rapl0));
        energy00 = Rapl::tod(Rapl::raplStop(0, 0, rapl00));
        instructions, cycles, ref_cycles, bus_cycles, stalled_cycles, cache_misses, cache_ref = Perf::perfStop(
            instructions_fd, cycles_fd, ref_cycles_fd, bus_cycles_fd, stalled_cycles_fd, cache_misses_fd, cache_ref_fd);

        threads = Rapl::numThreads();
        seconds = MTClock::timediff(sec1, nsec1, sec2, nsec2);
        printf("%d threads, %fs, %fJ %fJ, %lu instructions, %lu cycles, %lu ref cycles, %lu bus cycles, %lu stalled cycles, %lu cache misses, %lu cache ref\n",
            threads, seconds, energy0, energy00, instructions, cycles, ref_cycles, bus_cycles, stalled_cycles, cache_misses, cache_ref);
    }

    return 0;
}
