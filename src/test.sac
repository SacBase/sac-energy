use Rapl: all;

inline int +(int a, int b) { return _add_SxS_(a, b); }

int sum(int[d:shp] arr)
{
    return with {
        (_mul_SxV_(0, shp) <= iv < shp) : _sel_VxA_(iv, arr);
    } : fold(+, 0);
}

int[d:shp,d] iota(int[d] shp)
{
    return { iv -> iv | iv < shp };
}

noinline
int test()
{
    return sum(iota([1000,500,100]));
}

int main()
{
    start = raplStart();
    StdIO::printf("Found %d RAPL packages\n", _sel_VxA_([0], _shape_A_(start)));

    StdIO::printf("res = %d\n", test());

    end = raplEnd(start);
    //StdIO::printf("%fJ\n", _tod_S_(_sel_VxA_([0], end)) / 1e9);
    StdIO::print(end);

    return 0;
}
